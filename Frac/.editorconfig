# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\dev\skills\Products\Skills codebase based on best match to current usage at 24/01/2022
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for methods, lambdas, object_collection_array_initializers, control_blocks, types, and properties (also known as "Allman" style)
csharp_new_line_before_open_brace =all

#Formatting - organize using options

#do not place System.* using directives before other using directives
dotnet_sort_system_directives_first = false

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer curly braces even for one line of code
csharp_prefer_braces = true:suggestion

#Style - expression bodied member options

#prefer block bodies for accessors
csharp_style_expression_bodied_accessors =true:suggestion
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors =false:warning
#prefer expression-bodied members for methods when they will be a single line
csharp_style_expression_bodied_methods =true:warning
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties =true:warning

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration =true:warning
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true:suggestion
#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types =true:suggestion
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent =true:warning

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - Miscellaneous preferences

#prefer anonymous functions over local functions
csharp_style_pattern_local_over_anonymous_function =false:warning

#Style - modifier options

#prefer accessibility modifiers to be specified
dotnet_style_require_accessibility_modifiers = always:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = private,public,protected,internal,static,readonly,override,virtual,abstract,sealed:suggestion

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check =true:warning

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion
csharp_using_directive_placement=outside_namespace:warning
csharp_prefer_simple_using_statement=true:warning
csharp_style_expression_bodied_operators=true:warning
csharp_style_expression_bodied_indexers=true:warning
csharp_style_expression_bodied_lambdas=true:warning
csharp_style_throw_expression=true:warning
csharp_prefer_simple_default_expression=true:warning
csharp_style_prefer_index_operator=true:warning
csharp_style_prefer_range_operator=true:warning
csharp_style_deconstructed_variable_declaration=true:warning
csharp_prefer_static_local_function=true:warning
csharp_style_prefer_switch_expression=true:warning
csharp_style_prefer_pattern_matching=true:warning
csharp_style_pattern_matching_over_is_with_cast_check=true:warning
csharp_style_prefer_not_pattern=true:warning
dotnet_diagnostic.CA1001.severity=warning
dotnet_diagnostic.CA2246.severity=warning
dotnet_diagnostic.CA2244.severity=warning
csharp_style_unused_value_assignment_preference=discard_variable:warning
csharp_style_unused_value_expression_statement_preference=discard_variable
# S1135: Track uses of "TODO" tags
dotnet_diagnostic.S1135.severity = suggestion

[*.{cs,vb}]
dotnet_style_coalesce_expression=true:warning
dotnet_style_null_propagation=true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method=true:warning
dotnet_style_prefer_auto_properties=true:warning
dotnet_style_object_initializer=true:warning
dotnet_style_collection_initializer=true:warning
dotnet_style_prefer_simplified_boolean_expressions=true:warning
dotnet_style_prefer_conditional_expression_over_assignment=true:warning
dotnet_style_prefer_conditional_expression_over_return=true:warning
dotnet_style_explicit_tuple_names=true:warning
dotnet_style_prefer_inferred_tuple_names=true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names=true:warning
dotnet_style_prefer_compound_assignment=true:warning
dotnet_style_readonly_field=true:warning
dotnet_style_qualification_for_field=false:warning
dotnet_style_qualification_for_property=false:warning
dotnet_style_qualification_for_method=false:warning
dotnet_style_qualification_for_event=false:warning
dotnet_diagnostic.CA1000.severity=suggestion
dotnet_diagnostic.CA1050.severity=warning
dotnet_diagnostic.CA1051.severity=warning
dotnet_diagnostic.CA1061.severity=warning
dotnet_diagnostic.CA1304.severity=suggestion
dotnet_diagnostic.CA1707.severity=warning
dotnet_diagnostic.CA1715.severity=warning
dotnet_diagnostic.CA1827.severity=warning
dotnet_diagnostic.CA1828.severity=warning
dotnet_diagnostic.CA1829.severity=warning
dotnet_diagnostic.CA1826.severity=warning
dotnet_diagnostic.CA1830.severity=warning
dotnet_diagnostic.CA1832.severity=warning
dotnet_diagnostic.CA1833.severity=warning
dotnet_diagnostic.CA1836.severity=warning
dotnet_diagnostic.CA2012.severity=warning
dotnet_diagnostic.CA2011.severity=warning
dotnet_diagnostic.CA2009.severity=warning
dotnet_diagnostic.CA2201.severity=warning
dotnet_diagnostic.CA2211.severity=warning
dotnet_diagnostic.CA2208.severity=warning
dotnet_diagnostic.CA2215.severity=warning
dotnet_diagnostic.CA2219.severity=warning
dotnet_diagnostic.CA2248.severity=warning
dotnet_diagnostic.CA2249.severity=warning

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.const_should_be_pascal_case.severity = warning
dotnet_naming_rule.const_should_be_pascal_case.symbols = const
dotnet_naming_rule.const_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_field_or_property_should_be_begins_with__.severity = warning
dotnet_naming_rule.private_field_or_property_should_be_begins_with__.symbols = private_field_or_property
dotnet_naming_rule.private_field_or_property_should_be_begins_with__.style = begins_with__

dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.severity = warning
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.symbols = public_or_protected_field
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.variable_should_be_camelcase.severity = warning
dotnet_naming_rule.variable_should_be_camelcase.symbols = variable
dotnet_naming_rule.variable_should_be_camelcase.style = camelcase

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.public_or_protected_field.applicable_kinds = field
dotnet_naming_symbols.public_or_protected_field.applicable_accessibilities = public, protected
dotnet_naming_symbols.public_or_protected_field.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.private_field_or_property.applicable_kinds = property, field
dotnet_naming_symbols.private_field_or_property.applicable_accessibilities = private, private_protected
dotnet_naming_symbols.private_field_or_property.required_modifiers = 

dotnet_naming_symbols.variable.applicable_kinds = local
dotnet_naming_symbols.variable.applicable_accessibilities = local
dotnet_naming_symbols.variable.required_modifiers = 

dotnet_naming_symbols.const.applicable_kinds = property, field, local
dotnet_naming_symbols.const.applicable_accessibilities = *
dotnet_naming_symbols.const.required_modifiers = const

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.begins_with__.required_prefix = _
dotnet_naming_style.begins_with__.required_suffix = 
dotnet_naming_style.begins_with__.word_separator = 
dotnet_naming_style.begins_with__.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case
dotnet_diagnostic.CA1708.severity=warning
dotnet_code_quality_unused_parameters=all:warning
indent_style=space
